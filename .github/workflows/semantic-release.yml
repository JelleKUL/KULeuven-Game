# This is a basic workflow to help you get started with Actions

name: Continuous Integration

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build the documentation
  build-documentation:
    runs-on: windows-latest # Required by DocFX
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        # with:
        #   submodules: true

      - name: Install DocFX
        run: choco install -y docfx

      - name: Use Repo README.md as index.md
        run: cp README.md Documentation~/DocFx/index.md

      - name: Build Documentation
        run: docfx Documentation~/DocFx/docfx.json -t statictoc

      # Upload the generated documentation
      - name: Upload Documentation Site
        uses: actions/upload-artifact@v1
        with:
          name: _site
          path: Documentation~/DocFx/_site # Must equal the 'build.dest' value on your docfx.json

  # Deploy the generated documentation to the gh-pages branch
  deploy-documentation:

    # We need the documentation to have been successful
    needs: build-documentation
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        # with:
        #   submodules: true

      # Download the generated documentation
      - name: Download site artifact
        uses: actions/download-artifact@v1
        with:
          name: _site

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: _site

  # The job for building our package
#  build-package:
#
#    # We need the documentation to have been successful
#    needs: deploy-documentation
#
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#
#      - name: Configure HTTPS Auth
#        run: |
#          git config --global http.emptyAuth true
#      # Run through the Repo and detect changes, if new version, tag a snapshot of repo
#      - name: Semantic release
#        id: semantic
#        uses: cycjimmy/semantic-release-action@v2
#        with:
#          extra_plugins: |
#            @semantic-release/changelog
#            @semantic-release/git
#          branch: main
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      # Configure our Bot User
#      - name: Configure Bot User
#        if: steps.semantic.outputs.new_release_published == 'true'
#        run: |
#          git config --global user.name 'github-bot'
#          git config --global user.email 'github-bot@users.noreply.github.com'
#
#      # Recreate the UPM (Release) branch for the latest version
#      - name: Create UPM Branch
#        if: steps.semantic.outputs.new_release_published == 'true'
#        run: |
#          echo Checking out UPM Branch
#          git branch -d upm &> /dev/null || echo UPM Branch not found
#          git checkout -b upm
#
#      # Prep for release, hide Samples/ from Unity's compiler
#      - name: Refactor/Hide Samples Folder
#        if: steps.semantic.outputs.new_release_published == 'true'
#        run: |
#          echo Refactoring Samples
#          if [[ -d "Samples" ]]; then
#            git mv Samples Samples~
#            rm -f Samples.meta
#          fi
#
#      # Prep for release, hide Documentation/ from Unity's compiler
#      - name: Refactor/Hide Documentation Folder
#        if: steps.semantic.outputs.new_release_published == 'true'
#        run: |
#          echo Refactoring Documentation
#          if [[ -d "Documentation" ]]; then
#            git mv Documentation Documentation~
#            rm -f Documentation.meta
#          fi
#
#      # RIf there's a new version, remove unwanted files from the upm branch
#      - name: Remove CI Files
#        if: steps.semantic.outputs.new_release_published == 'true'
#        run: |
#          echo Removing Continuous Integration Files
#          rm -f ".releaserc.json" 
#          rm -rf ".github"
#          rm -f ".gitignore"
#
#      # Push the UPM branch with this release
#      - name: Push UPM Branch
#        if: steps.semantic.outputs.new_release_published == 'true'
#        run: |
#          echo Pushing Release to UPM Branch
#          git commit -am "Release v${{steps.semantic.outputs.new_release_version}}"
#          git push -f -u origin upm
#
#      # Tag the UPM branch with this release
#      - name: Tag UPM Branch
#        if: steps.semantic.outputs.new_release_published == 'true'
#        run: |
#          git tag v${{ steps.semantic.outputs.new_release_version }} upm
#          git push origin --tags
#
#      # Publish this tagged as a release
#      - name: Publish New Repo Release
#        if: steps.semantic.outputs.new_release_published == 'true'
#        run: |
#          echo Creating Repo Release
#          gh release create v${{steps.semantic.outputs.new_release_version}} -t "Release ${{steps.semantic.outputs.new_release_version}}" -F CHANGELOG.md
#        env:
#          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
#
#      # Installs NPM and NodeJS onto this container
#      - uses: actions/setup-node@v1
#        if: steps.semantic.outputs.new_release_published == 'true'
#        with:
#          node-version: 12
#          registry-url: https://npm.pkg.github.com/
#          scope: "@JelleKUL"
#
#      # Actually performs the publish operation
#      - name: Publish to GitHub Registry
#        if: steps.semantic.outputs.new_release_published == 'true'
#        # Publishes
#        run: |
#          npm publish
#        env:
#          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
